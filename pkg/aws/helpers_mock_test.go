// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/danmx/sigil/pkg/aws/helpers (interfaces: OSExecIface,OSIface)

// Package aws is a generated GoMock package.
package aws

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockOSExecIface is a mock of OSExecIface interface
type MockOSExecIface struct {
	ctrl     *gomock.Controller
	recorder *MockOSExecIfaceMockRecorder
}

// MockOSExecIfaceMockRecorder is the mock recorder for MockOSExecIface
type MockOSExecIfaceMockRecorder struct {
	mock *MockOSExecIface
}

// NewMockOSExecIface creates a new mock instance
func NewMockOSExecIface(ctrl *gomock.Controller) *MockOSExecIface {
	mock := &MockOSExecIface{ctrl: ctrl}
	mock.recorder = &MockOSExecIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOSExecIface) EXPECT() *MockOSExecIfaceMockRecorder {
	return m.recorder
}

// LookPath mocks base method
func (m *MockOSExecIface) LookPath(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookPath", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookPath indicates an expected call of LookPath
func (mr *MockOSExecIfaceMockRecorder) LookPath(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookPath", reflect.TypeOf((*MockOSExecIface)(nil).LookPath), arg0)
}

// MockOSIface is a mock of OSIface interface
type MockOSIface struct {
	ctrl     *gomock.Controller
	recorder *MockOSIfaceMockRecorder
}

// MockOSIfaceMockRecorder is the mock recorder for MockOSIface
type MockOSIfaceMockRecorder struct {
	mock *MockOSIface
}

// NewMockOSIface creates a new mock instance
func NewMockOSIface(ctrl *gomock.Controller) *MockOSIface {
	mock := &MockOSIface{ctrl: ctrl}
	mock.recorder = &MockOSIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOSIface) EXPECT() *MockOSIfaceMockRecorder {
	return m.recorder
}

// LookupEnv mocks base method
func (m *MockOSIface) LookupEnv(arg0 string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupEnv", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// LookupEnv indicates an expected call of LookupEnv
func (mr *MockOSIfaceMockRecorder) LookupEnv(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupEnv", reflect.TypeOf((*MockOSIface)(nil).LookupEnv), arg0)
}

// Setenv mocks base method
func (m *MockOSIface) Setenv(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setenv", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setenv indicates an expected call of Setenv
func (mr *MockOSIfaceMockRecorder) Setenv(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setenv", reflect.TypeOf((*MockOSIface)(nil).Setenv), arg0, arg1)
}
